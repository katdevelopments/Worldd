// Roblox Version: version-494828652c274712 (LIVE)
// Byfron Version(s): [hyperion-secured] [yara-secured]
namespace offsets {
// FUNCIONS:

constexpr uintptr_t callbackvalue_f    = (0x88);
constexpr uintptr_t require_lock       = (0x878);
constexpr uintptr_t overlap            = (0x268);

constexpr uintptr_t SCResume           = (0x7B0);
constexpr uintptr_t get_set            = (0xA0);
constexpr uintptr_t class_desc         = (0x18);
constexpr uintptr_t flag_f             = (0x50);

constexpr uintptr_t PropDescriptor     = (0x3B8);
constexpr uintptr_t ttype              = (0x58);
constexpr uintptr_t type_number        = (0x40);


// OFFSETS:

#pragma once

#include <Windows.h>
#include <iostream>
#include <vector>
#include <xorstr/xorstr.hpp>

static uintptr_t Roblox_BASE = (uintptr_t)GetModuleHandleA(0);
#define REBASE(x) (x + Roblox_BASE)
inline const uintptr_t Hyperion_Base = (uintptr_t)GetModuleHandle(xorstr_("RobloxPlayerBeta.dll"));
#define Hyperion_Rbase(x) ((x) + Hyperion_Base)


struct SignalT;
struct yubx_State;
struct Proto;

struct DebuggerResult_T {
    std::int32_t result;
    std::int32_t unk[0x4];
};
struct WeakThreadRef {
    std::atomic< std::int32_t > _refs;
    yubx_State* thread;
    std::int32_t thread_ref;
    std::int32_t object_id;
    std::int32_t unk1;
    std::int32_t unk2;

    WeakThreadRef(yubx_State* L)
        : thread(L), thread_ref(NULL), object_id(NULL), unk1(NULL), unk2(NULL) {
    };
};
typedef enum { SUCCESS, YIELD, ERR } SCResume_Result;

namespace Offsets {
    const uintptr_t BitMap                               = Hyperion_Rbase(0x293460);

    const uintptr_t ValidateBytecode                     = REBASE(0x1118A40);

    const uintptr_t luaF_freeproto                       = REBASE(0x2ADD420);
    const uintptr_t luaL_argerrorL                       = REBASE(0x2A7AE80);
    const uintptr_t luaL_typeerrorL                      = REBASE(0x2043CC0);
    const uintptr_t luaL_getmetafield                    = REBASE(0x2A7D120);
    const uintptr_t luaL_register                        = REBASE(0x2A7E410);
    const uintptr_t currfuncname                         = REBASE(0x2A7AE00);

    const uintptr_t newpage                              = REBASE(0x2ACE830);
    const uintptr_t newclasspage                         = REBASE(0x2ACE8E0);
    const uintptr_t freeclasspage                        = REBASE(0x2ACE950);
    const uintptr_t newblock                             = REBASE(0x2ACE9F0);
    const uintptr_t newgcoblock                          = REBASE(0x2ACEA80);
    const uintptr_t freeblock                            = REBASE(0x2ACEB20);
    const uintptr_t luaM_free                            = REBASE(0x2ACEBD0);
    const uintptr_t luaM_freegco                         = REBASE(0x2ACEC50);
    const uintptr_t luaM_visitgco                        = REBASE(0x2ACED70);
    const uintptr_t luaM_toobig                          = REBASE(0x2ACE800);

    const uintptr_t close_state                          = REBASE(0x2A8E460);
    const uintptr_t lua_rawcheckstack                    = REBASE(0x2A797B0);
    const uintptr_t luaA_toobject                        = REBASE(0x2A79350);
    const uintptr_t lua_pushvfstring                     = REBASE(0x2A7A160);
    const uintptr_t pseudo2addr                          = REBASE(0x2A79290);

    const uintptr_t luaT_objtypenamestr                  = REBASE(0x2ADCDA0);
    const uintptr_t luaT_objtypename                     = REBASE(0x2ADCF30);
    const uintptr_t auxopen                              = REBASE(0x2AB0AF0);
    const uintptr_t luaD_throw                           = REBASE(0x2A89450);
    const uintptr_t luaD_rawrunprotected                 = REBASE(0x2A89420);
    const uintptr_t get_capabilites                      = REBASE(0x3987D80);
    const uintptr_t FlogDataBank                         = REBASE(0x6F48718);
    const uintptr_t ScriptContextResume                  = REBASE(0x1193600);
    const uintptr_t OpcodeLookupTable                    = REBASE(0x55a2f80);
    const uintptr_t Print                                = REBASE(0x18069F0);

    const uintptr_t GetGlobalState                       = REBASE(0xEC0FA0);
    const uintptr_t Encrypt_State                        = REBASE(0x11B36A0);
    const uintptr_t RawScheduler                         = REBASE(0x73DAA78);
    const uintptr_t TaskSchedulerTargetFps               = REBASE(0x6989684);
    const uintptr_t LuaVMLoad                            = REBASE(0xE52F70);
    const uintptr_t Impersonator                         = REBASE(0x340A424E0);
    const uintptr_t PushInstance                         = REBASE(0x120B010);
    const uintptr_t PushInstance2                        = REBASE(0x120B060);
    const uintptr_t Luau_Execute                         = REBASE(0x2A8FD70);
    const uintptr_t TaskDefer                            = REBASE(0x13E7EA0);
    const uintptr_t LuaD_throw                           = REBASE(0x2A89450);
    const uintptr_t LuaO_NilObject                       = REBASE(0x4F011F8);
    const uintptr_t LuaH_DummyNode                       = REBASE(0x4F75B78);
    const uintptr_t KTable                               = REBASE(0x6989710);

    const uintptr_t FireMouseClick                       = REBASE(0x1E4ABA0);
    const uintptr_t FireMouseHoverEnter                  = REBASE(0x1E4C140);
    const uintptr_t FireMouseHoverLeave                  = REBASE(0x1E4C2E0);

    const uintptr_t FireTouchInterest                    = REBASE(0x2178400);
    const uintptr_t GetIdentityStruct                    = REBASE(0x3EA3500);
    const uintptr_t IdentityPtr                          = REBASE(0x69C6EE8);
    const uintptr_t GetProperty                          = REBASE(0xDBF910);
    const uintptr_t FireProximityPrompt                  = REBASE(0x1B281E0);

    namespace InternalFastFlags {
        const uintptr_t EnableLoadModule                 = REBASE(0x60834F8);
        const uintptr_t DebugCheckRenderThreading        = REBASE(0x60BDF90);
        const uintptr_t RenderDebugCheckThreading2       = REBASE(0x60BD320);
        const uintptr_t DisableCorescriptLoadstring      = REBASE(0x60834D8);
        const uintptr_t LockViolationInstanceCrash       = REBASE(0x608ECC0);
        const uintptr_t LockViolationScriptCrash         = REBASE(0x6083150);
        const uintptr_t WndProcessCheck                  = REBASE(0x6068E28);
        const uintptr_t LuaStepIntervalMsOverrideEnabled = REBASE(0x6086F90);
        const uintptr_t Crash147727ReportAll             = REBASE(0x6086550);
        const uintptr_t SetFastFlag                      = REBASE(0x3EC3CA0);
    }

    namespace yubxuserData {
        const uintptr_t SCResume_offset                  = 0x7B0;
        const uintptr_t DisableRequireLock               = 0x878;
    }

    namespace ReplicateSignal {
        const uintptr_t Register                         = REBASE(0x22F0930);
        const uintptr_t CastArgs                         = REBASE(0xED80F0);
        const uintptr_t VariantCastInt64                 = REBASE(0x17D4140);
        const uintptr_t VariantCastInt                   = REBASE(0x17D3F30);
        const uintptr_t VariantCastFloat                 = REBASE(0x17D4580);
    }

    namespace Instance {
        constexpr uintptr_t PropertyDescriptor           = 0x3B8;
        constexpr uintptr_t ClassName                    = 0x8;
        constexpr uintptr_t Children                     = 0x80;
        constexpr uintptr_t CallbackValue                = 0x88;
        constexpr uintptr_t Flags                        = 0x50;
    }

    namespace Scripts {
        const uintptr_t LocalScriptEmbedded              = 0x1B0;
        const uintptr_t ModuleScriptEmbedded             = 0x158;
        const uintptr_t weak_thread_node                 = 0x188;
        const uintptr_t weak_thread_ref                  = 0x8;
        const uintptr_t weak_thread_ref_live             = 0x20;
        const uintptr_t weak_thread_ref_live_thread      = 0x8;
    }
            
    namespace ExtraSpace {
        const uintptr_t Identity                         = 0x30;
        const uintptr_t Capabilities                     = 0x48;
    }
            
    namespace TaskScheduler {
        const uintptr_t FpsCap                           = 0x1B0;
        const uintptr_t JobStart                         = 0x1D0;
        const uintptr_t JobEnd                           = 0x1D8;
            
        namespace Job {
            const uintptr_t Name                         = 0x18;
            const uintptr_t TypeName                     = 0x150;
            
            namespace WaitingHybridScriptsJob {
                const uintptr_t ScriptContext            = 0x1F8;
            }
        }
    }


    namespace DataModel {        
        constexpr uintptr_t FakeDataModelToDataModel     = 0x1C0;
        const     uintptr_t FakeDataModelPointer         = REBASE(0x71CBE48);
        constexpr uintptr_t Overlap                      = 0x268;

        constexpr uintptr_t GameLoaded                   = 0x420;
        constexpr uintptr_t PlaceId                      = 0x1A0;
        constexpr uintptr_t Name                         = 0x88;
        constexpr uintptr_t ClassDescriptor              = 0x18;
        constexpr uintptr_t PrimitiveTouch               = 0x178LL;
    }
} 
            
namespace Roblox {
    inline auto Print = (uintptr_t(__fastcall*)(int, const char*, ...))Offsets::Print;
    inline auto PushInstance = (uintptr_t * (__fastcall*)(yubx_State*, uintptr_t))Offsets::PushInstance;
    inline auto PushInstance2 = (uintptr_t * (__fastcall*)(yubx_State*, std::shared_ptr<uintptr_t*>))Offsets::PushInstance2;
    inline auto FireProximityPrompt = (uintptr_t * (__thiscall*)(uintptr_t))Offsets::FireProximityPrompt;
    inline auto FireMouseClick = (void(__fastcall*)(__int64 a1, float a2, __int64 a3))Offsets::FireMouseClick;
    inline auto FireRightMouseClick = (void(__fastcall*)(__int64 a1, float a2, __int64 a3))Offsets::FireRightMouseClick;
    inline auto FireMouseHoverEnter = (void(__fastcall*)(__int64 a1, __int64 a2))Offsets::FireMouseHoverEnter;
    inline auto FireMouseHoverLeave = (void(__fastcall*)(__int64 a1, __int64 a2))Offsets::FireMouseHoverLeave;
    inline auto FireTouchInterest = (void(__fastcall*)(uintptr_t, uintptr_t, uintptr_t, bool, bool))Offsets::FireTouchInterest;
    inline auto GetState = (uintptr_t(__fastcall*)(int64_t, uint64_t*, uint64_t*))Offsets::GetGlobalState;

    inline auto KTable = reinterpret_cast<uintptr_t*>(Offsets::KTable);
    inline auto GetProperty = (uintptr_t * (__thiscall*)(uintptr_t, uintptr_t*))Offsets::GetProperty;
    inline auto Impersonator = (void(__fastcall*)(std::int64_t*, std::int32_t*, std::int64_t))Offsets::Impersonator;
    inline auto TaskDefer = (int(__fastcall*)(yubx_State*))Offsets::TaskDefer;

    inline auto LuaVMLoad = (uintptr_t(__fastcall*)(int64_t, std::string*, const char*, int))Offsets::LuaVMLoad;
    inline auto CastArgs = (uintptr_t(__fastcall*)(yubx_State * L, int, void*, bool, int))Offsets::ReplicateSignal::CastArgs;
    inline auto CastInt = (void(__fastcall*)(void* L))Offsets::ReplicateSignal::VariantCastInt;
    inline auto CastInt64 = (void(__fastcall*)(void* L))Offsets::ReplicateSignal::VariantCastInt64;
    inline auto CastFloat = (void(__fastcall*)(void* L))Offsets::ReplicateSignal::VariantCastFloat;
    inline auto SCResume = (int(__fastcall*)(std::int64_t scriptcontext_inst, DebuggerResult_T*, WeakThreadRef**, int32_t narg, bool resumeError, const char* szErrorMessage))Offsets::ScriptContextResume;
    inline auto GetIdentityStruct = (uintptr_t(__fastcall*)(uintptr_t))Offsets::GetIdentityStruct;
    inline auto Luau_Execute = (void(__fastcall*)(yubx_State*))Offsets::Luau_Execute;
    inline auto LuaD_Throw = (void(__fastcall*)(yubx_State*, int))Offsets::LuaD_throw;

    inline auto bytecodecheck = (int(__fastcall*)(__int64, const char*, unsigned char*, unsigned __int64, int))Offsets::btecodetrue;
}

// Dump credits: Yub-X Dumper
