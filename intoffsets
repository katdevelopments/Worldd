// Roblox Version: version-4aeb17bd13994560 (LIVE)
// Byfron Version(s): [hyperion-secured] [yara-secured]

// CFG BYPASS
pBase &= ~0xFFFF;
for (auto pg = pBase; pg < pBase + pOpt->SizeOfImage; pg += 0x1000) {
*reinterpret_cast<std::uint32_t*>(*reinterpret_cast<std::uintptr_t*>(bitmap) + (pg >> 0x13)) |=
    1 << ((pg >> 0x10 & 7) % 0x20);
}

// DLL OFFSET
const uintptr_t BitMap = Hyperion_Rbase(0x2BC718);

// CLIENT OFFSETS
#pragma once

#include <Windows.h>
#include <iostream>
#include <vector>
#include <xorstr/xorstr.hpp>

static uintptr_t Roblox_BASE = (uintptr_t)GetModuleHandleA(0);
#define REBASE(x) (x + Roblox_BASE)
inline const uintptr_t Hyperion_Base = (uintptr_t)GetModuleHandle(xorstr_("RobloxPlayerBeta.dll"));
#define Hyperion_Rbase(x) ((x) + Hyperion_Base)


struct SignalT;
struct lua_State;
struct Proto;

struct DebuggerResult_T {
    std::int32_t result;
    std::int32_t unk[0x4];
};
struct WeakThreadRef {
    std::atomic< std::int32_t > _refs;
    lua_State* thread;
    std::int32_t thread_ref;
    std::int32_t object_id;
    std::int32_t unk1;
    std::int32_t unk2;

    WeakThreadRef(lua_State* L)
        : thread(L), thread_ref(NULL), object_id(NULL), unk1(NULL), unk2(NULL) {
    };
};
typedef enum { SUCCESS, YIELD, ERR } SCResume_Result;

namespace Offsets {
    const uintptr_t BitMap                               = Hyperion_Rbase(0x2BC718);

    const uintptr_t luaL_argerrorL                       = REBASE(0x3736810);
    const uintptr_t luaL_typeerrorL                      = REBASE(0x2107800);
    const uintptr_t luaL_findtable                       = REBASE(0x373AC50);
    const uintptr_t luaL_where                           = REBASE(0x37369B0);
    const uintptr_t luaL_register                        = REBASE(0x3739D70);
    const uintptr_t currfuncname                         = REBASE(0x3736790);

    const uintptr_t luaG_runerrorL                       = REBASE(0x3741470);
    const uintptr_t newpage                              = REBASE(0x3789820);
    const uintptr_t newclasspage                         = REBASE(0x37898D0);
    const uintptr_t freeclasspage                        = REBASE(0x3789940);
    const uintptr_t newblock                             = REBASE(0x37899E0);
    const uintptr_t newgcoblock                          = REBASE(0x3789A70);
    const uintptr_t freeblock                            = REBASE(0x3789B10);
    const uintptr_t luaM_free                            = REBASE(0x3789BC0);
    const uintptr_t luaM_freegco                         = REBASE(0x3789C40);
    const uintptr_t luaM_visitgco                        = REBASE(0x3789D60);
    const uintptr_t luaM_toobig                          = REBASE(0x37897F0);

    const uintptr_t close_state                          = REBASE(0x37427F0);
    const uintptr_t f_luaopen                            = REBASE(0x3741AC0);
    const uintptr_t lua_rawcheckstack                    = REBASE(0x3734FB0);
    const uintptr_t luaA_toobject                        = REBASE(0x3734B60);
    const uintptr_t lua_pushvfstring                     = REBASE(0x3735AF0);
    const uintptr_t pseudo2addr                          = REBASE(0x3734AA0);

    const uintptr_t luaT_objtypename                     = REBASE(0x3797EF0);
    const uintptr_t auxopen                              = REBASE(0x376BAD0);
    const uintptr_t luaD_throw                           = REBASE(0x3743DC0);
    const uintptr_t luaD_rawrunprotected                 = REBASE(0x3743D90);
    const uintptr_t get_capabilites                      = REBASE(0x3AB1250);
    const uintptr_t FlogDataBank                         = REBASE(0x71205E8);
    const uintptr_t ScriptContextResume                  = REBASE(0x126CE90);
    const uintptr_t AppdataInfo                          = REBASE(0x73A6DF8);
    const uintptr_t OpcodeLookupTable                    = REBASE(0x5737000);
    const uintptr_t Print                                = REBASE(0x18CDF60);

    const uintptr_t GetGlobalState                       = REBASE(0xF5B090);
    const uintptr_t Encrypt_State                        = REBASE(0x123B430);
    const uintptr_t RawScheduler                         = REBASE(0x778C0E8);
    const uintptr_t TaskSchedulerTargetFps               = REBASE(0x6B61118);

    const uintptr_t Impersonator                         = REBASE(0x3AB1300);
    const uintptr_t IdentityPtr                          = REBASE(0x6B9E548);
    const uintptr_t GetIdentityStruct                    = REBASE(0x33730);

    const uintptr_t PushInstance                         = REBASE(0x12BA330);
    const uintptr_t PushInstance2                        = REBASE(0x12BA380);
    const uintptr_t Luau_Execute                         = REBASE(0x374B650);
    const uintptr_t TaskDefer                            = REBASE(0x14AB8E0);

    const uintptr_t LuaD_throw                           = REBASE(0x3743DC0);
    const uintptr_t LuaO_NilObject                       = REBASE(0x5298F48);
    const uintptr_t LuaH_DummyNode                       = REBASE(0x5298968);
    const uintptr_t KTable                               = REBASE(0x6B61230);

    const uintptr_t FireMouseClick                       = REBASE(0x1F36E50);
    const uintptr_t FireRightMouseClick                  = REBASE(0x1F36FF0);
    const uintptr_t FireMouseHoverEnter                  = REBASE(0x1F383F0);
    const uintptr_t FireMouseHoverLeave                  = REBASE(0x1F38590);

    const uintptr_t FireTouchInterest                    = REBASE(0x2244B50);
    const uintptr_t GetProperty                          = REBASE(0xDF2E30);
    const uintptr_t FireProximityPrompt                  = REBASE(0x1F92090);

    namespace InternalFastFlags {
        const uintptr_t EnableLoadModule                 = REBASE(0x6250918);
        const uintptr_t DebugCheckRenderThreading        = REBASE(0x6284540);
        const uintptr_t RenderDebugCheckThreading2       = REBASE(0x6283880);
        const uintptr_t DisableCorescriptLoadstring      = REBASE(0x62508E8);
        const uintptr_t LockViolationInstanceCrash       = REBASE(0x6256730);
        const uintptr_t LockViolationScriptCrash         = REBASE(0x624A6C0);
        const uintptr_t WndProcessCheck                  = REBASE(0x622FCD8);
        const uintptr_t LuaStepIntervalMsOverrideEnabled = REBASE(0x624E418);
        const uintptr_t Crash147727ReportAll             = REBASE(0x624F968);
        const uintptr_t SetFastFlag                      = REBASE(0x4013D00);
    }

    namespace yubxuserData {
        const uintptr_t SCResume_offset                  = 0x7A8;
        const uintptr_t DisableRequireLock               = 0x870;
    }

    namespace ReplicateSignal {
        const uintptr_t Register                         = REBASE(0x23B5050);
        const uintptr_t CastArgs                         = REBASE(0xF6DF00);
        const uintptr_t VariantCastInt64                 = REBASE(0x189E1A0);
        const uintptr_t VariantCastInt                   = REBASE(0x189DF90);
        const uintptr_t VariantCastFloat                 = REBASE(0x189E5E0);
    }

    namespace Instance {
        constexpr uintptr_t PropertyDescriptor           = 0x1B88; 
        constexpr uintptr_t ClassName                    = 0x8;
        constexpr uintptr_t Children                     = 0x80;
        constexpr uintptr_t CallbackValue                = 0x88;
        constexpr uintptr_t Flags                        = 0x50;
    }

    namespace Scripts {
        const uintptr_t LocalScriptEmbedded              = 0x1A8;
        const uintptr_t ModuleScriptEmbedded             = 0x150;
        const uintptr_t weak_thread_node                 = 0x180;
        const uintptr_t weak_thread_ref                  = 0x8;
        const uintptr_t weak_thread_ref_live             = 0x20;
        const uintptr_t weak_thread_ref_live_thread      = 0x8;
    }
            
    namespace ExtraSpace {
        const uintptr_t Identity                         = 0x30;
        const uintptr_t Capabilities                     = 0x48;
    }
            
    namespace TaskScheduler {
        const uintptr_t FpsCap                           = 0x1B0;
        const uintptr_t JobStart                         = 0x1D0;
        const uintptr_t JobEnd                           = 0x1D8;
            
        namespace Job {
            const uintptr_t Name                         = 0x18;
            const uintptr_t TypeName                     = 0x150;
            
            namespace WaitingHybridScriptsJob {
                const uintptr_t ScriptContext            = 0x1F8;
            }
        }
    }


    namespace DataModel {        
        constexpr uintptr_t FakeDataModelToDataModel     = 0x1C0;
        const     uintptr_t FakeDataModelPointer         = REBASE(0x73A7088);
        constexpr uintptr_t Overlap                      = 0x1F8;

        constexpr uintptr_t PlaceId                      = 0x198;
        constexpr uintptr_t Name                         = 0x80;
        constexpr uintptr_t ClassDescriptor              = 0x18;
        constexpr uintptr_t PrimitiveTouch               = 0x178LL;
    }
} 
            
namespace Roblox {
    inline auto Print = (uintptr_t(__fastcall*)(int, const char*, ...))Offsets::Print;
    inline auto PushInstance = (uintptr_t * (__fastcall*)(lua_State*, uintptr_t))Offsets::PushInstance;
    inline auto PushInstance2 = (uintptr_t * (__fastcall*)(lua_State*, std::shared_ptr<uintptr_t*>))Offsets::PushInstance2;
    inline auto FireProximityPrompt = (uintptr_t * (__thiscall*)(uintptr_t))Offsets::FireProximityPrompt;
    inline auto FireMouseClick = (void(__fastcall*)(__int64 a1, float a2, __int64 a3))Offsets::FireMouseClick;

    inline auto FireRightMouseClick = (void(__fastcall*)(__int64 a1, float a2, __int64 a3))Offsets::FireRightMouseClick;
    inline auto FireMouseHoverEnter = (void(__fastcall*)(__int64 a1, __int64 a2))Offsets::FireMouseHoverEnter;
    inline auto FireMouseHoverLeave = (void(__fastcall*)(__int64 a1, __int64 a2))Offsets::FireMouseHoverLeave;
    inline auto FireTouchInterest = (void(__fastcall*)(uintptr_t, uintptr_t, uintptr_t, bool, bool))Offsets::FireTouchInterest;
    inline auto GetState = (uintptr_t(__fastcall*)(int64_t, uint64_t*, uint64_t*))Offsets::GetGlobalState;

    inline auto KTable = reinterpret_cast<uintptr_t*>(Offsets::KTable);
    inline auto GetProperty = (uintptr_t * (__thiscall*)(uintptr_t, uintptr_t*))Offsets::GetProperty;

    inline auto Impersonator = (void(__fastcall*)(void*, void*, const void*, uint64_t, uint64_t))Offsets::Impersonator;
    inline auto GetIdentityStruct = reinterpret_cast<void* (__fastcall*)(void*)>(Offsets::GetIdentityStruct);

    inline auto TaskDefer = (int(__fastcall*)(lua_State*))Offsets::TaskDefer;

    inline auto CastArgs = (uintptr_t(__fastcall*)(lua_State * L, int, void*, bool, int))Offsets::ReplicateSignal::CastArgs;
    inline auto CastInt = (void(__fastcall*)(void* L))Offsets::ReplicateSignal::VariantCastInt;
    inline auto CastInt64 = (void(__fastcall*)(void* L))Offsets::ReplicateSignal::VariantCastInt64;
    inline auto CastFloat = (void(__fastcall*)(void* L))Offsets::ReplicateSignal::VariantCastFloat;

    inline auto SCResume = (int(__fastcall*)(std::int64_t scriptcontext_inst, DebuggerResult_T*, WeakThreadRef**, int32_t narg, bool resumeError, const char* szErrorMessage))Offsets::ScriptContextResume;
    inline auto Luau_Execute = (void(__fastcall*)(lua_State*))Offsets::Luau_Execute;
    inline auto LuaD_Throw = (void(__fastcall*)(lua_State*, int))Offsets::LuaD_throw;
}
