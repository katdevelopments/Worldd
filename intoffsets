// FUNCTIONS
// Roblox Version: version-7b14ca0aa83149fa
// Dump Time:      2025-08-27 03:01:28

constexpr uintptr_t callbackvalue_f    = (0x88);
constexpr uintptr_t require_lock       = (0x7E8);
constexpr uintptr_t overlap            = (0x280);

constexpr uintptr_t SCResume           = (0x720);
constexpr uintptr_t get_set            = (0xA0);
constexpr uintptr_t class_desc         = (0x18);
constexpr uintptr_t flag_f             = (0x50);

constexpr uintptr_t PropDescriptor     = (0x3C0);
constexpr uintptr_t ttype              = (0x58);
constexpr uintptr_t type_number        = (0x40);

// OFFSETS
// Roblox Version: version-7b14ca0aa83149fa
// Dump Time:      2025-08-27 03:01:27
#pragma once

#include <Windows.h>
#include <iostream>
#include <vector>
#include <xorstr/xorstr.hpp>

static uintptr_t Roblox_BASE = (uintptr_t)GetModuleHandleA(0);
#define REBASE(x) (x + Roblox_BASE)
inline const uintptr_t Hyperion_Base = (uintptr_t)GetModuleHandle(xorstr_("RobloxPlayerBeta.dll"));
#define Hyperion_Rbase(x) ((x) + Hyperion_Base)


struct SignalT;
struct yubx_State;
struct Proto;

struct DebuggerResult_T {
    std::int32_t result;
    std::int32_t unk[0x4];
};
struct WeakThreadRef {
    std::atomic< std::int32_t > _refs;
    yubx_State* thread;
    std::int32_t thread_ref;
    std::int32_t object_id;
    std::int32_t unk1;
    std::int32_t unk2;

    WeakThreadRef(yubx_State* L)
        : thread(L), thread_ref(NULL), object_id(NULL), unk1(NULL), unk2(NULL) {
    };
};
typedef enum { SUCCESS, YIELD, ERR } SCResume_Result;

namespace Offsets {
    const uintptr_t BitMap                               = Hyperion_Rbase(0x233298);

    const uintptr_t ValidateBytecode                     = REBASE(0xE5F460);

    const uintptr_t luaL_argerrorL                       = REBASE(0x2728400);
    const uintptr_t luaL_typeerrorL                      = REBASE(0x1B57FD0);
    const uintptr_t luaL_findtable                       = REBASE(0x272CE30);
    const uintptr_t luaL_where                           = REBASE(0x27285A0);
    const uintptr_t luaL_getmetafield                    = REBASE(0x272A660);
    const uintptr_t luaL_register                        = REBASE(0x272BF60);
    const uintptr_t currfuncname                         = REBASE(0x2728380);

    const uintptr_t luaG_runerrorL                       = REBASE(0x273AEC0);
    const uintptr_t newpage                              = REBASE(0x277F1E0);
    const uintptr_t newclasspage                         = REBASE(0x277F290);
    const uintptr_t freeclasspage                        = REBASE(0x277F300);
    const uintptr_t newblock                             = REBASE(0x277F3A0);
    const uintptr_t newgcoblock                          = REBASE(0x277F430);
    const uintptr_t freeblock                            = REBASE(0x277F4D0);
    const uintptr_t luaM_free                            = REBASE(0x277F580);
    const uintptr_t luaM_freegco                         = REBASE(0x277F600);
    const uintptr_t luaM_visitgco                        = REBASE(0x277F720);
    const uintptr_t luaM_toobig                          = REBASE(0x277F1B0);

    const uintptr_t close_state                          = REBASE(0x273C230);
    const uintptr_t lua_newstate                         = REBASE(0x273C8D0);
    const uintptr_t f_luaopen                            = REBASE(0x273B510);
    const uintptr_t lua_rawcheckstack                    = REBASE(0x2726D30);
    const uintptr_t luaA_toobject                        = REBASE(0x27265E0);
    const uintptr_t lua_pushvfstring                     = REBASE(0x27276E0);
    const uintptr_t pseudo2addr                          = REBASE(0x2726520);

    const uintptr_t luaT_objtypenamestr                  = REBASE(0x278E3A0);
    const uintptr_t luaT_objtypename                     = REBASE(0x278E530);
    const uintptr_t auxopen                              = REBASE(0x274A8E0);
    const uintptr_t luaopen_base                         = REBASE(0x274AFA0);
    const uintptr_t luaD_throw                           = REBASE(0x2736F20);
    const uintptr_t luaD_rawrunprotected                 = REBASE(0x2736EF0);
    const uintptr_t get_capabilites                      = REBASE(0x354C570);
    const uintptr_t FlogDataBank                         = REBASE(0x6DAE4D8);
    const uintptr_t ScriptContextResume                  = REBASE(0xE0F060);
    const uintptr_t AppdataInfo                          = REBASE(0x703A238);
    const uintptr_t OpcodeLookupTable                    = REBASE(0x53efd90);
    const uintptr_t Print                                = REBASE(0x14F0450);

    const uintptr_t GetGlobalState                       = REBASE(0xB89310);
    const uintptr_t Encrypt_State                        = REBASE(0xDFE430);
    const uintptr_t RawScheduler                         = REBASE(0x710ABA0);
    const uintptr_t TaskSchedulerTargetFps               = REBASE(0x67F3AE0);
    const uintptr_t LuaVMLoad                            = REBASE(0xB8D640);
    const uintptr_t Impersonator                         = REBASE(0x354C620);
    const uintptr_t PushInstance                         = REBASE(0xED7460);
    const uintptr_t PushInstance2                        = REBASE(0xED74B0);
    const uintptr_t Luau_Execute                         = REBASE(0x276A0A0);
    const uintptr_t TaskDefer                            = REBASE(0x1028110);
    const uintptr_t LuaD_throw                           = REBASE(0x2736F20);
    const uintptr_t LuaO_NilObject                       = REBASE(0x4DC4D78);
    const uintptr_t LuaH_DummyNode                       = REBASE(0x4DC44A8);
    const uintptr_t KTable                               = REBASE(0x67F3B60);

    const uintptr_t FireMouseClick                       = REBASE(0x1C29100);
    const uintptr_t FireRightMouseClick                  = REBASE(0x1C292A0);
    const uintptr_t FireMouseHoverEnter                  = REBASE(0x1C2A6A0);
    const uintptr_t FireMouseHoverLeave                  = REBASE(0x1C2A840);

    const uintptr_t FireTouchInterest                    = REBASE(0x1E5BAD0);
    const uintptr_t GetIdentityStruct                    = REBASE(0x3A58230);
    const uintptr_t IdentityPtr                          = REBASE(0x6828718);
    const uintptr_t GetProperty                          = REBASE(0xA98EE0);
    const uintptr_t FireProximityPrompt                  = REBASE(0x1D05DD0);

    namespace InternalFastFlags {
        const uintptr_t EnableLoadModule                 = REBASE(0x5EBCCD0);
        const uintptr_t DebugCheckRenderThreading        = REBASE(0x5EE6BF0);
        const uintptr_t RenderDebugCheckThreading2       = REBASE(0x5F150D0);
        const uintptr_t DisableCorescriptLoadstring      = REBASE(0x5EBCCB0);
        const uintptr_t LockViolationInstanceCrash       = REBASE(0x5EC7E90);
        const uintptr_t LockViolationScriptCrash         = REBASE(0x5EBCA08);
        const uintptr_t WndProcessCheck                  = REBASE(0x5EAAC50);
        const uintptr_t LuaStepIntervalMsOverrideEnabled = REBASE(0x5EBF660);
        const uintptr_t Crash147727ReportAll             = REBASE(0x5EBF8F0);
        const uintptr_t SetFastFlag                      = REBASE(0x3A78C10);
    }

    namespace yubxuserData {
        const uintptr_t SCResume_offset                  = 0x720;
        const uintptr_t DisableRequireLock               = 0x7E8;
    }

    namespace ReplicateSignal {
        const uintptr_t Register                         = REBASE(0x272BF60);
        const uintptr_t CastArgs                         = REBASE(0xC10060);
        const uintptr_t VariantCastInt64                 = REBASE(0x14AF630);
        const uintptr_t VariantCastInt                   = REBASE(0x14AF420);
        const uintptr_t VariantCastFloat                 = REBASE(0x14AFA70);
    }

    namespace Instance {
        constexpr uintptr_t PropertyDescriptor           = 0x3C0;
        constexpr uintptr_t ClassName                    = 0x8;
        constexpr uintptr_t Children                     = 0x80;
        constexpr uintptr_t CallbackValue                = 0x88;
        constexpr uintptr_t Flags                        = 0x50;
    }

    namespace Scripts {
        const uintptr_t LocalScriptEmbedded              = 0x1B0;
        const uintptr_t ModuleScriptEmbedded             = 0x158;
        const uintptr_t weak_thread_node                 = 0x188;
        const uintptr_t weak_thread_ref                  = 0x8;
        const uintptr_t weak_thread_ref_live             = 0x20;
        const uintptr_t weak_thread_ref_live_thread      = 0x8;
    }
            
    namespace ExtraSpace {
        const uintptr_t Identity                         = 0x30;
        const uintptr_t Capabilities                     = 0x48;
    }
            
    namespace TaskScheduler {
        const uintptr_t FpsCap                           = 0x1B0;
        const uintptr_t JobStart                         = 0x1D0;
        const uintptr_t JobEnd                           = 0x1D8;
            
        namespace Job {
            const uintptr_t Name                         = 0x18;
            const uintptr_t TypeName                     = 0x150;
            
            namespace WaitingHybridScriptsJob {
                const uintptr_t ScriptContext            = 0x1F8;
            }
        }
    }


    namespace DataModel {        
        constexpr uintptr_t FakeDataModelToDataModel     = 0x1C0;
        const     uintptr_t FakeDataModelPointer         = REBASE(0x703A578);
        constexpr uintptr_t Overlap                      = 0x280;

        constexpr uintptr_t GameLoaded                   = 0x420;
        constexpr uintptr_t PlaceId                      = 0x1A0;
        constexpr uintptr_t Name                         = 0x88;
        constexpr uintptr_t ClassDescriptor              = 0x18;
        constexpr uintptr_t PrimitiveTouch               = 0x178LL;
    }
} 
            
namespace Roblox {
    inline auto Print = (uintptr_t(__fastcall*)(int, const char*, ...))Offsets::Print;
    inline auto PushInstance = (uintptr_t * (__fastcall*)(yubx_State*, uintptr_t))Offsets::PushInstance;
    inline auto PushInstance2 = (uintptr_t * (__fastcall*)(yubx_State*, std::shared_ptr<uintptr_t*>))Offsets::PushInstance2;
    inline auto FireProximityPrompt = (uintptr_t * (__thiscall*)(uintptr_t))Offsets::FireProximityPrompt;
    inline auto FireMouseClick = (void(__fastcall*)(__int64 a1, float a2, __int64 a3))Offsets::FireMouseClick;
    inline auto FireRightMouseClick = (void(__fastcall*)(__int64 a1, float a2, __int64 a3))Offsets::FireRightMouseClick;
    inline auto FireMouseHoverEnter = (void(__fastcall*)(__int64 a1, __int64 a2))Offsets::FireMouseHoverEnter;
    inline auto FireMouseHoverLeave = (void(__fastcall*)(__int64 a1, __int64 a2))Offsets::FireMouseHoverLeave;
    inline auto FireTouchInterest = (void(__fastcall*)(uintptr_t, uintptr_t, uintptr_t, bool, bool))Offsets::FireTouchInterest;
    inline auto GetState = (uintptr_t(__fastcall*)(int64_t, uint64_t*, uint64_t*))Offsets::GetGlobalState;

    inline auto KTable = reinterpret_cast<uintptr_t*>(Offsets::KTable);
    inline auto GetProperty = (uintptr_t * (__thiscall*)(uintptr_t, uintptr_t*))Offsets::GetProperty;
    inline auto Impersonator = (void(__fastcall*)(std::int64_t*, std::int32_t*, std::int64_t))Offsets::Impersonator;
    inline auto TaskDefer = (int(__fastcall*)(yubx_State*))Offsets::TaskDefer;

    inline auto LuaVMLoad = (uintptr_t(__fastcall*)(int64_t, std::string*, const char*, int))Offsets::LuaVMLoad;
    inline auto CastArgs = (uintptr_t(__fastcall*)(yubx_State * L, int, void*, bool, int))Offsets::ReplicateSignal::CastArgs;
    inline auto CastInt = (void(__fastcall*)(void* L))Offsets::ReplicateSignal::VariantCastInt;
    inline auto CastInt64 = (void(__fastcall*)(void* L))Offsets::ReplicateSignal::VariantCastInt64;
    inline auto CastFloat = (void(__fastcall*)(void* L))Offsets::ReplicateSignal::VariantCastFloat;
    inline auto SCResume = (int(__fastcall*)(std::int64_t scriptcontext_inst, DebuggerResult_T*, WeakThreadRef**, int32_t narg, bool resumeError, const char* szErrorMessage))Offsets::ScriptContextResume;
    inline auto GetIdentityStruct = (uintptr_t(__fastcall*)(uintptr_t))Offsets::GetIdentityStruct;
    inline auto Luau_Execute = (void(__fastcall*)(yubx_State*))Offsets::Luau_Execute;
    inline auto LuaD_Throw = (void(__fastcall*)(yubx_State*, int))Offsets::LuaD_throw;

    inline auto bytecodecheck = (int(__fastcall*)(__int64, const char*, unsigned char*, unsigned __int64, int))Offsets::btecodetrue;
}

