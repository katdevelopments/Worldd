local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local LogService = game:GetService("LogService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

if playerGui:FindFirstChild("WorldClientGui") then
    warn("World Client is already running. Aborting duplicate script.")
    return
end

local isLoadstringEnabled = false
local success, result = pcall(loadstring, "return 1")
if success and type(result) == "function" then
    local funcSuccess, funcResult = pcall(result)
    if funcSuccess and funcResult == 1 then
        isLoadstringEnabled = true
    end
end

local commandHistory = {}
local historyIndex = 0
local logCounter = 0
local isVisible = true
local isMinimized = false
local isDragging = false
local isLoggingInternally = false
local tutorialShown = false
local isInputMaximized = false
local dragStart, frameStartPos
local lastMinimizedPosition = UDim2.new(0.5, 0, 0.05, 0)
local activeTweens = {}
local connections = {}
local targetPosition

local function debounce(func, delay)
    local timer
    return function(...)
        local context = self
        local args = {...}
        if timer then
            task.cancel(timer)
        end
        timer = task.delay(delay, function()
            func(context, unpack(args))
        end)
    end
end

local CONFIG = {
    IconID = "rbxassetid://133555354035357",
    Title = "World Client",
    MaxLogs = 150,
    
    Colors = {
        Background = Color3.fromRGB(10, 10, 15),
        PrimaryAccent = Color3.fromRGB(37, 99, 235),
        SecondaryAccent = Color3.fromRGB(59, 130, 246),
        Text = Color3.fromRGB(229, 231, 235),
        Error = Color3.fromRGB(239, 68, 68),
        Warning = Color3.fromRGB(245, 158, 11),
        InputEcho = Color3.fromRGB(156, 163, 175),
        MinimizeButton = Color3.fromRGB(30, 64, 175),
        UtilButton = Color3.fromRGB(30, 64, 175),
        UtilButtonHover = Color3.fromRGB(59, 130, 246),
    },
    
    Font = Enum.Font.Code,
    BoldFont = Enum.Font.SourceSansBold,
}

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "WorldClientGui"
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
screenGui.ResetOnSpawn = false
screenGui.DisplayOrder = 2147483647

local blurGui = Instance.new("ScreenGui")
blurGui.Name = "WorldClientBlurGui"
blurGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
blurGui.DisplayOrder = 2147483646
blurGui.ResetOnSpawn = false

local blur = Instance.new("BlurEffect")
blur.Size = 24
blur.Enabled = isVisible
blur.Parent = game.Lighting

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(1, 0, 1, 0)
mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
mainFrame.BackgroundTransparency = 1
mainFrame.ClipsDescendants = true
mainFrame.ZIndex = 1
mainFrame.Visible = true
mainFrame.Active = true

local blurFrame = Instance.new("Frame", blurGui)
blurFrame.Name = "BlurFrame"
blurFrame.BackgroundColor3 = CONFIG.Colors.Background
blurFrame.BackgroundTransparency = 0.3
blurFrame.ZIndex = 0
blurFrame.Visible = isVisible
blurFrame.Size = mainFrame.Size
blurFrame.Position = mainFrame.Position
blurFrame.AnchorPoint = mainFrame.AnchorPoint
local blurCorner = Instance.new("UICorner", blurFrame)
blurCorner.CornerRadius = UDim.new(0, 8)
local blurStroke = Instance.new("UIStroke", blurFrame)
blurStroke.Color = CONFIG.Colors.PrimaryAccent
blurStroke.Thickness = 2
blurStroke.Transparency = 0.2

local header = Instance.new("Frame", mainFrame)
header.Name = "Header"; header.Size = UDim2.new(1, 0, 0, 40); header.BackgroundTransparency = 1; header.Active = true; header.ZIndex = 2

local icon = Instance.new("ImageLabel", header)
icon.Name = "Icon"; icon.Size = UDim2.new(0, 24, 0, 24); icon.Position = UDim2.new(0, 10, 0.5, 0); icon.AnchorPoint = Vector2.new(0, 0.5); icon.BackgroundTransparency = 1; icon.Image = CONFIG.IconID

local titleLabel = Instance.new("TextLabel", header)
titleLabel.Name = "Title"; titleLabel.Size = UDim2.new(1, -400, 1, 0); titleLabel.Position = UDim2.new(0, 40, 0, 0); titleLabel.BackgroundTransparency = 1; titleLabel.Font = CONFIG.BoldFont; titleLabel.Text = CONFIG.Title; titleLabel.TextColor3 = CONFIG.Colors.Text; titleLabel.TextSize = 18; titleLabel.TextXAlignment = Enum.TextXAlignment.Left

local function createClickParticles(parent, color)
    local emitter = Instance.new("ParticleEmitter")
    emitter.Color = ColorSequence.new(color or CONFIG.Colors.SecondaryAccent)
    emitter.LightEmission = 0.8
    emitter.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.1, 8), NumberSequenceKeypoint.new(1, 12)})
    emitter.Transparency = NumberSequence.new({NumberSequenceKeypoint.new(0, 0), NumberSequenceKeypoint.new(0.5, 0.6), NumberSequenceKeypoint.new(1, 1)})
    emitter.Lifetime = NumberRange.new(0.4, 0.6)
    emitter.Speed = NumberRange.new(30, 50)
    emitter.SpreadAngle = Vector2.new(360, 360)
    emitter.Parent = parent
    emitter:Emit(25)
    task.delay(1, function() if emitter and emitter.Parent then emitter:Destroy() end end)
end

local function createIconButton(parent, emoji, size, color)
    local btn = Instance.new("TextButton", parent)
    btn.Size = UDim2.new(0, size, 0, size); btn.BackgroundColor3 = color; btn.Font = Enum.Font.SourceSans; btn.Text = emoji; btn.TextColor3 = Color3.new(1, 1, 1); btn.TextSize = math.floor(size * 0.7); Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)
    
    local originalSize = btn.Size
    table.insert(connections, btn.MouseEnter:Connect(function() TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = CONFIG.Colors.UtilButtonHover}):Play() end))
    table.insert(connections, btn.MouseLeave:Connect(function() TweenService:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = color}):Play() end))
    
    table.insert(connections, btn.MouseButton1Down:Connect(function() 
        TweenService:Create(btn, TweenInfo.new(0.1), {Size = UDim2.fromOffset(originalSize.X.Offset * 0.9, originalSize.Y.Offset * 0.9)}):Play()
        createClickParticles(btn)
    end))
    table.insert(connections, btn.MouseButton1Up:Connect(function() 
        TweenService:Create(btn, TweenInfo.new(0.1), {Size = originalSize}):Play()
    end))
    
    return btn
end

local allControls = Instance.new("Frame", header)
allControls.Name = "AllControls"; allControls.Size = UDim2.new(0, 400, 1, 0); allControls.Position = UDim2.new(1, -10, 0, 0); allControls.AnchorPoint = Vector2.new(1, 0); allControls.BackgroundTransparency = 1
local allControlsLayout = Instance.new("UIListLayout", allControls); allControlsLayout.FillDirection = Enum.FillDirection.Horizontal; allControlsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right; allControlsLayout.VerticalAlignment = Enum.VerticalAlignment.Center; allControlsLayout.Padding = UDim.new(0, 8)

local leftControls = Instance.new("Frame", allControls)
leftControls.Name = "LeftControls"; leftControls.BackgroundTransparency = 1; leftControls.AutomaticSize = Enum.AutomaticSize.X
local leftControlsLayout = Instance.new("UIListLayout", leftControls); leftControlsLayout.FillDirection = Enum.FillDirection.Horizontal; leftControlsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right; leftControlsLayout.VerticalAlignment = Enum.VerticalAlignment.Center; leftControlsLayout.Padding = UDim.new(0, 8)

local rightControls = Instance.new("Frame", allControls)
rightControls.Name = "RightControls"; rightControls.BackgroundTransparency = 1; rightControls.AutomaticSize = Enum.AutomaticSize.X
local rightControlsLayout = Instance.new("UIListLayout", rightControls); rightControlsLayout.FillDirection = Enum.FillDirection.Horizontal; rightControlsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right; rightControlsLayout.VerticalAlignment = Enum.VerticalAlignment.Center; rightControlsLayout.Padding = UDim.new(0, 8)

local scriptHubButton = createIconButton(leftControls, "üìú", 28, CONFIG.Colors.UtilButton)
local siteButton = createIconButton(leftControls, "üåê", 28, CONFIG.Colors.UtilButton)
local discordButton = createIconButton(leftControls, "üí¨", 28, CONFIG.Colors.UtilButton)
local copyButton = createIconButton(leftControls, "üìã", 28, CONFIG.Colors.UtilButton)
local clearButton = createIconButton(leftControls, "üóëÔ∏è", 28, CONFIG.Colors.UtilButton)
local refreshButton = createIconButton(leftControls, "üîÑ", 28, CONFIG.Colors.UtilButton)

local minimizeButton = createIconButton(rightControls, "‚óºÔ∏è", 28, CONFIG.Colors.MinimizeButton)

local footer = Instance.new("Frame", mainFrame)
footer.Name = "Footer"; footer.Size = UDim2.new(1, 0, 0, 80); footer.Position = UDim2.new(0, 0, 1, -80); footer.BackgroundTransparency = 1; footer.ZIndex = 3

local logContainer = Instance.new("ScrollingFrame", mainFrame)
logContainer.Name = "LogContainer"; logContainer.Size = UDim2.new(1, 0, 1, -120); logContainer.Position = UDim2.new(0, 0, 0, 40); logContainer.BackgroundTransparency = 1; logContainer.BorderSizePixel = 0; logContainer.ScrollBarImageColor3 = CONFIG.Colors.PrimaryAccent; logContainer.ScrollBarThickness = 8; logContainer.Active = true; logContainer.ZIndex = 1
local uiListLayout = Instance.new("UIListLayout", logContainer); uiListLayout.Padding = UDim.new(0, 5); uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder

local runButton = Instance.new("TextButton", footer)
runButton.Name = "RunButton"; runButton.Size = UDim2.new(0, 80, 1, -10); runButton.Position = UDim2.new(1, -5, 0.5, 0); runButton.AnchorPoint = Vector2.new(1, 0.5); runButton.BackgroundColor3 = CONFIG.Colors.SecondaryAccent; runButton.Font = CONFIG.BoldFont; runButton.Text = "Run"; runButton.TextColor3 = Color3.new(1, 1, 1); runButton.TextSize = 16; Instance.new("UICorner", runButton).CornerRadius = UDim.new(0, 6)

local expandInputButton = createIconButton(footer, "‚Üï", 24, CONFIG.Colors.UtilButton)
expandInputButton.Position = UDim2.new(1, -110, 0.15, 0)
expandInputButton.ZIndex = 3
expandInputButton.Visible = false

local inputContainer = Instance.new("ScrollingFrame", footer)
inputContainer.Name = "InputContainer"; inputContainer.Size = UDim2.new(1, -100, 1, -10); inputContainer.Position = UDim2.new(0, 5, 0.5, 0); inputContainer.AnchorPoint = Vector2.new(0, 0.5); inputContainer.BackgroundColor3 = Color3.fromRGB(0, 0, 0); inputContainer.BackgroundTransparency = 0.4; inputContainer.BorderSizePixel = 0; inputContainer.ScrollBarImageColor3 = CONFIG.Colors.PrimaryAccent; inputContainer.ScrollBarThickness = 0; Instance.new("UICorner", inputContainer).CornerRadius = UDim.new(0, 6)

local inputBox = Instance.new("TextBox", inputContainer)
inputBox.Name = "InputBox"; inputBox.Size = UDim2.new(1, 0, 0, 0); inputBox.AutomaticSize = Enum.AutomaticSize.Y; inputBox.BackgroundTransparency = 1; inputBox.ClearTextOnFocus = false; inputBox.Font = CONFIG.Font; inputBox.PlaceholderText = "Execute Luau code..."; inputBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150); inputBox.TextColor3 = CONFIG.Colors.Text; inputBox.TextSize = 14;
inputBox.MultiLine = true
inputBox.Text = ""

local inputBoxPadding = Instance.new("UIPadding", inputBox); inputBoxPadding.PaddingLeft = UDim.new(0, 10); inputBoxPadding.PaddingRight = UDim.new(0, 10); inputBoxPadding.PaddingTop = UDim.new(0,5); inputBoxPadding.PaddingBottom = UDim.new(0,5);

local function updateInputControlsVisibility()
    task.wait() 
    local neededHeight = inputBox.TextBounds.Y
    local availableHeight = inputContainer.AbsoluteSize.Y - inputBoxPadding.PaddingTop.Offset - inputBoxPadding.PaddingBottom.Offset
    
    local needsScroll = neededHeight > availableHeight
    expandInputButton.Visible = needsScroll
    inputContainer.ScrollBarThickness = needsScroll and 6 or 0
end

local function updateInputCanvas()
    inputContainer.CanvasSize = UDim2.new(0, 0, 0, inputBox.AbsoluteSize.Y)
    if not isInputMaximized then
      inputContainer.CanvasPosition = Vector2.new(0, inputBox.AbsoluteSize.Y)
    end
    updateInputControlsVisibility()
end
local debouncedUpdate = debounce(updateInputCanvas, 0.1)
table.insert(connections, inputBox:GetPropertyChangedSignal("Text"):Connect(debouncedUpdate))

function showTutorial()
    tutorialShown = true
    
    local tutorialFrame = Instance.new("Frame", screenGui)
    tutorialFrame.Name = "TutorialFrame"; tutorialFrame.Size = UDim2.new(0, 450, 0, 250); tutorialFrame.Position = UDim2.new(0.5, 0, 0.5, 0); tutorialFrame.AnchorPoint = Vector2.new(0.5, 0.5); tutorialFrame.BackgroundColor3 = CONFIG.Colors.Background; tutorialFrame.BackgroundTransparency = 0.1; tutorialFrame.ZIndex = 10
    local tutCorner = Instance.new("UICorner", tutorialFrame); tutCorner.CornerRadius = UDim.new(0, 8)
    local tutStroke = Instance.new("UIStroke", tutorialFrame); tutStroke.Color = CONFIG.Colors.PrimaryAccent; tutStroke.Thickness = 2
    
    local tutTitle = Instance.new("TextLabel", tutorialFrame)
    tutTitle.Size = UDim2.new(1, -20, 0, 30); tutTitle.Position = UDim2.new(0.5, 0, 0, 10); tutTitle.AnchorPoint = Vector2.new(0.5, 0); tutTitle.BackgroundTransparency = 1; tutTitle.Font = CONFIG.BoldFont; tutTitle.TextColor3 = CONFIG.Colors.Text; tutTitle.TextSize = 20
    
    local tutBody = Instance.new("TextLabel", tutorialFrame)
    tutBody.Size = UDim2.new(1, -20, 0, 130); tutBody.Position = UDim2.new(0.5, 0, 0, 45); tutBody.AnchorPoint = Vector2.new(0.5, 0); tutBody.BackgroundTransparency = 1; tutBody.Font = Enum.Font.SourceSans; tutBody.TextColor3 = CONFIG.Colors.Text; tutBody.TextSize = 16; tutBody.TextWrapped = true; tutBody.TextYAlignment = Enum.TextYAlignment.Top; tutBody.Text = ""
    
    local buttonFrame = Instance.new("Frame", tutorialFrame)
    buttonFrame.Size = UDim2.new(1, 0, 0, 35); buttonFrame.Position = UDim2.new(0.5, 0, 1, -15); buttonFrame.AnchorPoint = Vector2.new(0.5, 1); buttonFrame.BackgroundTransparency = 1
    
    local pageIndicator = Instance.new("TextLabel", buttonFrame)
    pageIndicator.Size = UDim2.new(0, 50, 1, 0); pageIndicator.Position = UDim2.new(0.5, 0, 0.5, 0); pageIndicator.AnchorPoint = Vector2.new(0.5, 0.5); pageIndicator.BackgroundTransparency = 1; pageIndicator.Font = CONFIG.BoldFont; pageIndicator.TextColor3 = CONFIG.Colors.Text; pageIndicator.TextSize = 16
    
    local prevButton = createIconButton(buttonFrame, "‚¨ÖÔ∏è", 35, CONFIG.Colors.UtilButton)
    prevButton.Position = UDim2.new(0, 20, 0.5, 0); prevButton.AnchorPoint = Vector2.new(0, 0.5)
    
    local nextButton = createIconButton(buttonFrame, "‚û°Ô∏è", 35, CONFIG.Colors.SecondaryAccent)
    nextButton.Position = UDim2.new(1, -20, 0.5, 0); nextButton.AnchorPoint = Vector2.new(1, 0.5)

    local skipButton = Instance.new("TextButton", buttonFrame)
    skipButton.Size = UDim2.new(0, 100, 1, 0); skipButton.Position = UDim2.new(0.5, -110, 0.5, 0); skipButton.AnchorPoint = Vector2.new(0.5, 0.5); skipButton.BackgroundColor3 = CONFIG.Colors.UtilButton; skipButton.Font = CONFIG.BoldFont; skipButton.Text = "Skip"; skipButton.TextColor3 = Color3.new(1,1,1); skipButton.TextSize = 18; Instance.new("UICorner", skipButton).CornerRadius = UDim.new(0, 6)
    
    tutorialFrame.Size = UDim2.new(0,0,0,0)
    TweenService:Create(tutorialFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Size = UDim2.new(0, 450, 0, 250)}):Play()
    createClickParticles(tutorialFrame, CONFIG.Colors.PrimaryAccent)
    
    local pages = {
        {Title = "Welcome!", Text = "This is the World Client, a powerful tool for developers. Let's walk through the features."},
        {Title = "Toggling & Moving", Text = "You can click the minimize ('‚óºÔ∏è') button to collapse or expand this window.\n\nTo move the minimized bar, simply click and drag it."},
        {Title = "Managing Logs", Text = "Hover over any log entry to reveal üìã (copy) and üóëÔ∏è (delete) buttons for that specific line.\n\nUse the main header buttons to manage all logs at once."},
        {Title = "Executing Code", Text = "Type any Luau code into the input bar and press 'Run' or Enter to execute it.\n\nUse the Up/Down arrow keys to navigate your command history."},
        {Title = "You're all set!", Text = "That's all for now. You can re-open this tutorial by typing 'tutorial()' in the command bar. Enjoy!"}
    }
    local currentPage = 1
    
    local function updatePage()
        local pageData = pages[currentPage]
        tutTitle.Text = pageData.Title
        pageIndicator.Text = currentPage .. "/" .. #pages
        prevButton.Visible = currentPage > 1
        nextButton.Text = (currentPage == #pages) and "‚úÖ" or "‚û°Ô∏è"
        skipButton.Visible = (currentPage ~= #pages)
        
        for i = 1, #pageData.Text do
            if not tutBody.Parent then break end
            tutBody.Text = string.sub(pageData.Text, 1, i)
            task.wait(0.01)
        end
    end
    
    local function closeTutorial()
        if not tutorialFrame.Parent then return end
        local tween = TweenService:Create(tutorialFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In), {Size = UDim2.new(0,0,0,0)})
        tween:Play()
        tween.Completed:Wait()
        if tutorialFrame.Parent then tutorialFrame:Destroy() end
    end
    
    table.insert(connections, prevButton.MouseButton1Click:Connect(function() if currentPage > 1 then currentPage -= 1; updatePage() end end))
    table.insert(connections, nextButton.MouseButton1Click:Connect(function() if currentPage < #pages then currentPage += 1; updatePage() else closeTutorial() end end))
    table.insert(connections, skipButton.MouseButton1Click:Connect(function() createClickParticles(skipButton); closeTutorial() end))
    
    updatePage()
end

function toggleMinimize()
    isMinimized = not isMinimized
    local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    
    footer.Visible = not isMinimized
    logContainer.Visible = not isMinimized
    blur.Enabled = isVisible and not isMinimized
    mainFrame.Active = not isMinimized
    
    if isMinimized then
        leftControls.Visible = false
        titleLabel.Size = UDim2.new(0, 150, 1, 0)
        
        TweenService:Create(mainFrame, tweenInfo, { 
            Size = UDim2.new(0, 220, 0, 40),
            Position = lastMinimizedPosition,
            AnchorPoint = Vector2.new(0.5, 0) 
        }):Play()

        minimizeButton.Text = "üî≤"
        
    else
        lastMinimizedPosition = mainFrame.Position 
        
        leftControls.Visible = true
        titleLabel.Size = UDim2.new(1, -400, 1, 0)
        
        TweenService:Create(mainFrame, tweenInfo, {
            Size = UDim2.new(1, 0, 1, 0), 
            Position = UDim2.new(0.5, 0, 0.5, 0), 
            AnchorPoint = Vector2.new(0.5, 0.5) 
        }):Play()

        minimizeButton.Text = "‚óºÔ∏è"
        
        if not tutorialShown then showTutorial() end
    end
end

function updateScrollCanvas()
    task.wait()
    if uiListLayout and uiListLayout.Parent then
        logContainer.CanvasSize = UDim2.new(0, 0, 0, uiListLayout.AbsoluteContentSize.Y)
    end
end

function clearLogs()
    for _, child in ipairs(logContainer:GetChildren()) do
        if child:IsA("Frame") then child:Destroy() end
    end
    updateScrollCanvas()
end

function refreshLogs()
    clearLogs()
    if not isLoadstringEnabled then
        log("Warning: 'loadstring' is disabled. Code execution will not work.", "Warning")
    end
    for _, entry in ipairs(LogService:GetLogHistory()) do
        log(entry.message, tostring(entry.messageType):gsub("Message", ""))
    end
    log("Console logs refreshed. Type 'tutorial()' to see the intro again.", "Output")
end

function log(message, messageType)
    isLoggingInternally = true
    logCounter += 1
    
    local logFrame = Instance.new("Frame", logContainer)
    logFrame.Name = "LogFrame"; logFrame.BackgroundTransparency = 1; logFrame.Size = UDim2.new(1, 0, 0, 0); logFrame.AutomaticSize = Enum.AutomaticSize.Y; logFrame.LayoutOrder = logCounter
    
    local logLayout = Instance.new("UIListLayout", logFrame)
    logLayout.FillDirection = Enum.FillDirection.Horizontal; logLayout.VerticalAlignment = Enum.VerticalAlignment.Top
    
    local logEntry = Instance.new("TextLabel", logFrame)
    logEntry.Name = "LogEntry"; logEntry.BackgroundTransparency = 1; logEntry.Font = CONFIG.Font; logEntry.Text = tostring(message); logEntry.TextSize = 14; logEntry.TextWrapped = true; logEntry.TextXAlignment = Enum.TextXAlignment.Left; logEntry.Size = UDim2.new(1, -60, 0, 0); logEntry.AutomaticSize = Enum.AutomaticSize.Y

    if messageType == "Error" then logEntry.TextColor3 = CONFIG.Colors.Error
    elseif messageType == "Warning" then logEntry.TextColor3 = CONFIG.Colors.Warning
    elseif messageType == "Input" then logEntry.TextColor3 = CONFIG.Colors.InputEcho; logEntry.Text = "> " .. tostring(message)
    else logEntry.TextColor3 = CONFIG.Colors.Text end

    local actionsFrame = Instance.new("Frame", logFrame)
    actionsFrame.Name = "Actions"; actionsFrame.Size = UDim2.new(0, 60, 1, 0); actionsFrame.BackgroundTransparency = 1; actionsFrame.Visible = false
    local actionsLayout = Instance.new("UIListLayout", actionsFrame); actionsLayout.FillDirection = Enum.FillDirection.Horizontal; actionsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right; actionsLayout.Padding = UDim.new(0, 4)

    local copyLogButton = createIconButton(actionsFrame, "üìã", 22, CONFIG.Colors.UtilButton)
    local deleteLogButton = createIconButton(actionsFrame, "üóëÔ∏è", 22, CONFIG.Colors.UtilButton)
    
    table.insert(connections, copyLogButton.MouseButton1Click:Connect(function()
        local success, err = pcall(function()
            setclipboard(logEntry.Text)
        end)
        if success then
            log("Copied: " .. string.sub(logEntry.Text, 1, 40) .. "...", "Output")
        else
            log("Clipboard write failed: " .. tostring(err), "Error")
        end
    end))
    
    table.insert(connections, deleteLogButton.MouseButton1Click:Connect(function() 
        createClickParticles(logFrame, CONFIG.Colors.Error)
        local tween = TweenService:Create(logFrame, TweenInfo.new(0.3), {Size = UDim2.new(1, 0, 0, 0), Transparency = 1})
        tween:Play()
        tween.Completed:Wait()
        if logFrame.Parent then logFrame:Destroy() end
        updateScrollCanvas()
    end))

    table.insert(connections, logFrame.MouseEnter:Connect(function() actionsFrame.Visible = true end))
    table.insert(connections, logFrame.MouseLeave:Connect(function() actionsFrame.Visible = false end))

    logFrame.Position = UDim2.new(0, 0, 0, 20)
    logEntry.TextTransparency = 1
    TweenService:Create(logFrame, TweenInfo.new(0.3), {Position = UDim2.new(0,0,0,0)}):Play()
    TweenService:Create(logEntry, TweenInfo.new(0.3), {TextTransparency = 0}):Play()

    updateScrollCanvas()
    if #logContainer:GetChildren() > 1 then
        logContainer.CanvasPosition = Vector2.new(0, logContainer.CanvasSize.Y.Offset)
    end
    isLoggingInternally = false
end

function executeCommand()
    local command = inputBox.Text
    if command:gsub("%s", "") == "" then return end
    
    createClickParticles(runButton, CONFIG.Colors.Text)
    table.insert(commandHistory, 1, command)
    if #commandHistory > 50 then table.remove(commandHistory) end
    historyIndex = 0; inputBox.Text = ""
    
    if command:lower():gsub("%s", "") == "tutorial()" then
        showTutorial()
        return
    end

    if not isLoadstringEnabled then
        log("Execution failed: 'loadstring' is disabled in this Roblox environment for security reasons.", "Error")
        return
    end
    
    local func, err = loadstring(command)
    if not func then log("Syntax Error: " .. err, "Error"); return end
    
    local success, result = pcall(func)
    if not success then 
        log("Runtime Error: " .. tostring(result), "Error")
    else
        if result ~= nil then 
            log(tostring(result), "Output") 
        else
            log("Script successfully executed.", "Output")
        end
    end
end

table.insert(connections, mainFrame:GetPropertyChangedSignal("Size"):Connect(function() blurFrame.Size = mainFrame.Size end))
table.insert(connections, mainFrame:GetPropertyChangedSignal("Position"):Connect(function() blurFrame.Position = mainFrame.Position end))
table.insert(connections, mainFrame:GetPropertyChangedSignal("AnchorPoint"):Connect(function() blurFrame.AnchorPoint = mainFrame.AnchorPoint end))

table.insert(connections, header.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        if not isMinimized then return end
        
        isDragging = true; 
        dragStart = UserInputService:GetMouseLocation(); 
        frameStartPos = mainFrame.Position; 
        targetPosition = mainFrame.Position
        
        local changedConn
        changedConn = input.Changed:Connect(function() 
            if input.UserInputState == Enum.UserInputState.End then 
                isDragging = false 
                changedConn:Disconnect()
            end 
        end)
    end
end))

table.insert(connections, RunService.RenderStepped:Connect(function(dt)
    if isDragging then
        local mouseDelta = UserInputService:GetMouseLocation() - dragStart
        targetPosition = UDim2.new(frameStartPos.X.Scale, frameStartPos.X.Offset + mouseDelta.X, frameStartPos.Y.Scale, frameStartPos.Y.Offset + mouseDelta.Y)
        mainFrame.Position = mainFrame.Position:Lerp(targetPosition, dt * 15)
    end
end))

table.insert(connections, inputBox.FocusLost:Connect(function(enterPressed) if enterPressed and inputBox.Text ~= "" and not UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) and not UserInputService:IsKeyDown(Enum.KeyCode.RightShift) then executeCommand(); inputBox:CaptureFocus() end end))
table.insert(connections, runButton.MouseButton1Click:Connect(executeCommand))
table.insert(connections, inputBox.InputBegan:Connect(function(input)
    if not isVisible then return end
    if input.KeyCode == Enum.KeyCode.Up then
        historyIndex = math.min(historyIndex + 1, #commandHistory)
        if commandHistory[historyIndex] then inputBox.Text = commandHistory[historyIndex] end
    elseif input.KeyCode == Enum.KeyCode.Down then
        historyIndex = math.max(historyIndex - 1, 0)
        inputBox.Text = historyIndex == 0 and "" or commandHistory[historyIndex]
    end
end))

table.insert(connections, scriptHubButton.MouseButton1Click:Connect(function()
    pcall(setclipboard, "https://world-script-hub.netlify.app/")
    log("Script Hub link copied to clipboard!", "Output")
end))

table.insert(connections, siteButton.MouseButton1Click:Connect(function()
    pcall(setclipboard, "https://useworld.xyz")
    log("Website link copied to clipboard!", "Output")
end))

table.insert(connections, discordButton.MouseButton1Click:Connect(function()
    pcall(setclipboard, "https://dsc.gg/globes")
    log("Discord link copied to clipboard!", "Output")
end))

table.insert(connections, expandInputButton.MouseButton1Click:Connect(function()
    isInputMaximized = not isInputMaximized
    local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    
    local footerSize, logContainerSize, logContainerPos, footerPos
    if isInputMaximized then
        footerSize = UDim2.new(1, 0, 1, -40)
        footerPos = UDim2.new(0, 0, 0, 40)
        expandInputButton.Text = "‚úï"
    else
        footerSize = UDim2.new(1, 0, 0, 80)
        footerPos = UDim2.new(0, 0, 1, -80)
        expandInputButton.Text = "‚Üï"
    end
    
    TweenService:Create(footer, tweenInfo, {Size = footerSize, Position = footerPos}):Play()
end))

table.insert(connections, minimizeButton.MouseButton1Click:Connect(toggleMinimize))
table.insert(connections, clearButton.MouseButton1Click:Connect(clearLogs))
table.insert(connections, refreshButton.MouseButton1Click:Connect(refreshLogs))

table.insert(connections, copyButton.MouseButton1Click:Connect(function() 
    local t = {}
    for _, c in ipairs(logContainer:GetChildren()) do 
        if c:IsA("Frame") and c:FindFirstChild("LogEntry") then 
            table.insert(t, c.LogEntry.Text) 
        end 
    end
    local fullLogText = table.concat(t, "\n")
    
    local success, err = pcall(function()
        setclipboard(fullLogText)
    end)
    
    if success then
        log("All logs copied to clipboard.", "Output") 
    else
        log("Clipboard write failed: " .. tostring(err), "Error")
    end
end))

table.insert(connections, LogService.MessageOut:Connect(function(message, messageType)
    if isLoggingInternally then return end
    log(message, tostring(messageType):gsub("Message", ""))
end))

screenGui.Parent = playerGui
blurGui.Parent = playerGui

local function loopGlow()
    local info = TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
    activeTweens.glow = TweenService:Create(blurStroke, info, {Transparency = 0.8})
    activeTweens.glow:Play()
end

screenGui.Destroying:Connect(function()
    if blur and blur.Parent then
        blur:Destroy()
    end
    if blurGui and blurGui.Parent then
        blurGui:Destroy()
    end
    for _, tween in pairs(activeTweens) do
        tween:Cancel()
    end
    for _, connection in ipairs(connections) do
        connection:Disconnect()
    end
end)

refreshLogs()
toggleMinimize()
loopGlow()
updateInputControlsVisibility()